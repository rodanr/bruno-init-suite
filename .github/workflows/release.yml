name: Release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        arch: [amd64, arm64]
        exclude:
          - os: windows-latest
            arch: arm64

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Go
        uses: actions/setup-go@v3
        with:
          go-version: 1.18

      - name: Set up Environment Variables
        run: |
          echo "VERSION=$(git describe --tags --always)" >> $GITHUB_ENV

      - name: Build binaries
        env:
          GOOS: ${{ matrix.os == 'ubuntu-latest' && 'linux' || matrix.os == 'macos-latest' && 'darwin' || 'windows' }}
          GOARCH: ${{ matrix.arch }}
          VERSION: ${{ env.VERSION }}
        run: |
          mkdir -p build
          OUTPUT="build/bruno-init-suite-${GOOS}-${GOARCH}"
          if [ "${GOOS}" == "windows" ]; then
            OUTPUT+=".exe"
          fi
          echo "Building for ${GOOS}/${GOARCH}..."
          env GOOS=${GOOS} GOARCH=${GOARCH} go build -ldflags "-X bruno-init-suite/internal/version.Version=${VERSION}" -o "${OUTPUT}"

      - name: Archive binaries
        run: |
          cd build
          for FILE in *; do
            if [ "${{ matrix.os }}" == "windows-latest" ]; then
              zip "${FILE}.zip" "${FILE}"
            else
              tar -czvf "${FILE}.tar.gz" "${FILE}"
            fi
          done

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        with:
          token: ${{ secrets.PAT_TOKEN }}
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/*
          asset_name: ${{ matrix.os }}-${{ matrix.arch }}-${{ github.sha }}.${{ matrix.os == 'windows-latest' && 'zip' || 'tar.gz' }}
          asset_content_type: ${{ matrix.os == 'windows-latest' && 'application/zip' || 'application/gzip' }}
